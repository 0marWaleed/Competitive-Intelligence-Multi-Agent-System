# -*- coding: utf-8 -*-
"""Report Generator Agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hWc8D1CtuCrFkfTw9ecSdP_RaY1DWF_k
"""

!pip install fpdf2 plotly seaborn matplotlib pandas



import json
import datetime
from dataclasses import dataclass, asdict
from typing import List, Dict, Any, Optional
from enum import Enum
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from fpdf import FPDF
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import numpy as np


class EventType(Enum):
    PRODUCT_LAUNCH = "Product Launch"
    PRICING_CHANGE = "Pricing Change"
    MARKETING_CAMPAIGN = "Marketing Campaign"
    EXPANSION = "Market Expansion"
    LEADERSHIP_CHANGE = "Leadership Change"
    FUNDING_INVESTMENT = "Funding/Investment"
    TECHNOLOGY_UPDATE = "Technology Update"
    PARTNERSHIP = "Partnership"
    RECALL_ISSUE = "Recall/Issue"

class UrgencyLevel(Enum):
    CRITICAL = "Critical"
    HIGH = "High"
    MEDIUM = "Medium"
    LOW = "Low"

@dataclass
class CompetitiveEvent:
    """Data structure for competitive intelligence events"""
    event_id: str
    timestamp: datetime.datetime
    competitor: str
    event_type: EventType
    title: str
    description: str
    impact_score: float
    urgency_level: UrgencyLevel
    entities: List[str]
    strategic_analysis: str
    recommendations: List[str]
    source_url: str
    confidence_score: float

class MobileMarketReportGenerator:
    """Report Generator Agent for Mobile Phone Market Intelligence"""

    def __init__(self):
        self.mobile_companies = {
            "Apple": {"market_share": 23.4, "focus": ["iOS", "Premium", "Ecosystem"]},
            "Samsung": {"market_share": 22.1, "focus": ["Android", "Innovation", "Display"]},
            "Xiaomi": {"market_share": 13.2, "focus": ["Value", "MIUI", "Global"]},
            "Oppo": {"market_share": 10.8, "focus": ["Camera", "Design", "Charging"]},
            "Vivo": {"market_share": 9.1, "focus": ["Selfie", "Music", "Youth"]},
            "OnePlus": {"market_share": 2.1, "focus": ["Performance", "OxygenOS", "Flagship"]},
            "Google": {"market_share": 3.1, "focus": ["Pixel", "AI", "Pure Android"]},
            "Huawei": {"market_share": 8.2, "focus": ["Camera", "HarmonyOS", "5G"]}
        }

    def generate_daily_brief(self, events: List[CompetitiveEvent]) -> Dict[str, Any]:
        """Generate daily intelligence brief"""
        today = datetime.datetime.now().strftime("%Y-%m-%d")

        # Filter today's events
        today_events = [e for e in events if e.timestamp.date() == datetime.datetime.now().date()]

        # Categorize by urgency
        critical_events = [e for e in today_events if e.urgency_level == UrgencyLevel.CRITICAL]
        high_priority = [e for e in today_events if e.urgency_level == UrgencyLevel.HIGH]

        brief = {
            "report_type": "Daily Brief",
            "date": today,
            "summary": {
                "total_events": len(today_events),
                "critical_alerts": len(critical_events),
                "high_priority": len(high_priority),
                "companies_mentioned": list(set([e.competitor for e in today_events]))
            },
            "critical_events": [self._format_event_summary(e) for e in critical_events],
            "high_priority_events": [self._format_event_summary(e) for e in high_priority[:5]],
            "key_trends": self._identify_daily_trends(today_events),
            "immediate_actions": self._extract_immediate_actions(critical_events + high_priority)
        }

        return brief

    def generate_weekly_intelligence(self, events: List[CompetitiveEvent]) -> Dict[str, Any]:
        """Generate comprehensive weekly intelligence report"""
        week_start = datetime.datetime.now() - datetime.timedelta(days=7)
        week_events = [e for e in events if e.timestamp >= week_start]

        # Analysis by competitor
        competitor_analysis = self._analyze_by_competitor(week_events)

        # Technology trends
        tech_trends = self._analyze_technology_trends(week_events)

        # Market movements
        market_analysis = self._analyze_market_movements(week_events)

        report = {
            "report_type": "Weekly Intelligence",
            "period": f"{week_start.strftime('%Y-%m-%d')} to {datetime.datetime.now().strftime('%Y-%m-%d')}",
            "executive_summary": self._generate_executive_summary(week_events),
            "competitor_analysis": competitor_analysis,
            "technology_trends": tech_trends,
            "market_movements": market_analysis,
            "strategic_recommendations": self._generate_strategic_recommendations(week_events),
            "risk_assessment": self._assess_competitive_risks(week_events)
        }

        return report

    def generate_monthly_strategic(self, events: List[CompetitiveEvent]) -> Dict[str, Any]:
        """Generate monthly strategic analysis report"""
        month_start = datetime.datetime.now() - datetime.timedelta(days=30)
        month_events = [e for e in events if e.timestamp >= month_start]

        # Deep strategic analysis
        strategic_shifts = self._identify_strategic_shifts(month_events)
        competitive_landscape = self._analyze_competitive_landscape(month_events)
        innovation_analysis = self._analyze_innovation_patterns(month_events)

        report = {
            "report_type": "Monthly Strategic Analysis",
            "period": f"{month_start.strftime('%Y-%m-%d')} to {datetime.datetime.now().strftime('%Y-%m-%d')}",
            "strategic_overview": self._generate_strategic_overview(month_events),
            "strategic_shifts": strategic_shifts,
            "competitive_landscape": competitive_landscape,
            "innovation_analysis": innovation_analysis,
            "market_opportunities": self._identify_market_opportunities(month_events),
            "threat_analysis": self._conduct_threat_analysis(month_events),
            "long_term_recommendations": self._generate_long_term_recommendations(month_events)
        }

        return report

    def create_visual_dashboard(self, events: List[CompetitiveEvent]) -> go.Figure:
        """Create interactive visual dashboard"""
        # Prepare data
        df = pd.DataFrame([{
            'competitor': e.competitor,
            'event_type': e.event_type.value,
            'impact_score': e.impact_score,
            'timestamp': e.timestamp,
            'urgency': e.urgency_level.value
        } for e in events])

        # Create subplots
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=('Events by Competitor', 'Impact Score Distribution',
                          'Event Timeline', 'Event Types Distribution'),
            specs=[[{"secondary_y": False}, {"secondary_y": False}],
                   [{"colspan": 2}, None]],
            vertical_spacing=0.12
        )

        # Events by competitor
        competitor_counts = df['competitor'].value_counts()
        fig.add_trace(
            go.Bar(x=competitor_counts.index, y=competitor_counts.values,
                   name="Events Count", marker_color='#1f77b4'),
            row=1, col=1
        )

        # Impact score distribution
        fig.add_trace(
            go.Histogram(x=df['impact_score'], nbinsx=20, name="Impact Scores",
                        marker_color='#ff7f0e'),
            row=1, col=2
        )

        # Timeline
        daily_events = df.groupby(df['timestamp'].dt.date).size().reset_index()
        daily_events.columns = ['date', 'count']
        fig.add_trace(
            go.Scatter(x=daily_events['date'], y=daily_events['count'],
                      mode='lines+markers', name="Daily Events",
                      line=dict(color='#2ca02c')),
            row=2, col=1
        )

        fig.update_layout(
            title="Mobile Market Competitive Intelligence Dashboard",
            height=800,
            showlegend=True
        )

        return fig

    def export_to_pdf(self, report_data: Dict[str, Any], filename: str = None):
        """Export report to PDF format"""
        if filename is None:
            filename = f"mobile_market_report_{datetime.datetime.now().strftime('%Y%m%d')}.pdf"

        class PDFReport(FPDF):
            def header(self):
                self.set_font('Arial', 'B', 15)
                self.cell(0, 10, 'Mobile Market Competitive Intelligence Report', 0, 1, 'C')
                self.ln(10)

            def chapter_title(self, title):
                self.set_font('Arial', 'B', 14)
                self.cell(0, 10, title, 0, 1, 'L')
                self.ln(5)

            def chapter_body(self, body):
                self.set_font('Arial', '', 11)
                # Handle unicode characters
                body = body.encode('latin-1', 'replace').decode('latin-1')
                self.multi_cell(0, 6, body)
                self.ln(5)

        pdf = PDFReport()
        pdf.add_page()

        # Add report content
        if report_data.get('executive_summary'):
            pdf.chapter_title('Executive Summary')
            pdf.chapter_body(report_data['executive_summary'])

        if report_data.get('critical_events'):
            pdf.chapter_title('Critical Events')
            for event in report_data['critical_events'][:5]:  # Limit to avoid PDF size issues
                pdf.chapter_body(f"â€¢ {event.get('title', 'N/A')}: {event.get('description', 'N/A')}")

        if report_data.get('strategic_recommendations'):
            pdf.chapter_title('Strategic Recommendations')
            for i, rec in enumerate(report_data['strategic_recommendations'][:10], 1):
                pdf.chapter_body(f"{i}. {rec}")

        pdf.output(filename)
        print(f"Report exported to {filename}")
        return filename

    def _format_event_summary(self, event: CompetitiveEvent) -> Dict[str, Any]:
        """Format event for summary display"""
        return {
            "title": event.title,
            "competitor": event.competitor,
            "event_type": event.event_type.value,
            "impact_score": event.impact_score,
            "urgency": event.urgency_level.value,
            "description": event.description[:200] + "..." if len(event.description) > 200 else event.description,
            "key_recommendations": event.recommendations[:3]  # Top 3 recommendations
        }

    def _identify_daily_trends(self, events: List[CompetitiveEvent]) -> List[str]:
        """Identify key trends from daily events"""
        trends = []

        # Event type clustering
        event_types = [e.event_type for e in events]
        most_common_type = max(set(event_types), key=event_types.count) if event_types else None

        if most_common_type:
            count = event_types.count(most_common_type)
            trends.append(f"{count} {most_common_type.value} events detected today")

        # High-impact events
        high_impact = [e for e in events if e.impact_score >= 7.0]
        if high_impact:
            trends.append(f"{len(high_impact)} high-impact competitive events")

        # Competitor activity
        active_competitors = list(set([e.competitor for e in events]))
        if len(active_competitors) > 3:
            trends.append(f"High competitive activity: {len(active_competitors)} companies active")

        return trends[:5]  # Return top 5 trends

    def _extract_immediate_actions(self, events: List[CompetitiveEvent]) -> List[str]:
        """Extract immediate action items from critical events"""
        actions = []

        for event in events:
            if event.urgency_level in [UrgencyLevel.CRITICAL, UrgencyLevel.HIGH]:
                # Add top recommendation
                if event.recommendations:
                    actions.append(f"[{event.competitor}] {event.recommendations[0]}")

        return actions[:10]  # Return top 10 actions

    def _analyze_by_competitor(self, events: List[CompetitiveEvent]) -> Dict[str, Any]:
        """Analyze events by competitor"""
        analysis = {}

        for competitor in self.mobile_companies.keys():
            competitor_events = [e for e in events if e.competitor == competitor]

            if competitor_events:
                avg_impact = sum(e.impact_score for e in competitor_events) / len(competitor_events)
                event_types = [e.event_type.value for e in competitor_events]
                most_common_event = max(set(event_types), key=event_types.count)

                analysis[competitor] = {
                    "total_events": len(competitor_events),
                    "average_impact": round(avg_impact, 2),
                    "most_common_event_type": most_common_event,
                    "strategic_focus": self.mobile_companies[competitor]["focus"],
                    "key_activities": [e.title for e in competitor_events[:3]]
                }

        return analysis

    def _analyze_technology_trends(self, events: List[CompetitiveEvent]) -> Dict[str, Any]:
        """Analyze technology trends from events"""
        tech_keywords = {
            "5G": ["5G", "fifth generation", "5g network"],
            "AI": ["AI", "artificial intelligence", "machine learning", "neural"],
            "Camera": ["camera", "photography", "computational photography", "lens"],
            "Battery": ["battery", "charging", "wireless charging", "power"],
            "Display": ["display", "screen", "OLED", "refresh rate", "resolution"],
            "Foldable": ["foldable", "fold", "flexible display"],
            "AR/VR": ["AR", "VR", "augmented reality", "virtual reality"]
        }

        trends = {}
        for tech, keywords in tech_keywords.items():
            count = 0
            relevant_events = []

            for event in events:
                text = (event.title + " " + event.description).lower()
                if any(keyword.lower() in text for keyword in keywords):
                    count += 1
                    relevant_events.append(event.competitor)

            if count > 0:
                trends[tech] = {
                    "mentions": count,
                    "companies_involved": list(set(relevant_events))
                }

        return trends

    def _generate_executive_summary(self, events: List[CompetitiveEvent]) -> str:
        """Generate executive summary"""
        total_events = len(events)
        high_impact_events = len([e for e in events if e.impact_score >= 7.0])
        active_companies = len(set([e.competitor for e in events]))

        summary = f"""
        This week's competitive intelligence reveals {total_events} significant events across
        {active_companies} mobile phone companies. {high_impact_events} events scored as high-impact
        (7.0+), requiring strategic attention. Key developments include product launches,
        technology announcements, and market expansion activities that could reshape the
        competitive landscape.
        """

        return summary.strip()

    def _generate_strategic_recommendations(self, events: List[CompetitiveEvent]) -> List[str]:
        """Generate strategic recommendations"""
        recommendations = []

        # Analyze high-impact events
        high_impact = [e for e in events if e.impact_score >= 7.0]

        for event in high_impact[:5]:  # Top 5 high-impact events
            if event.recommendations:
                recommendations.extend(event.recommendations[:2])  # Top 2 recommendations per event

        # Remove duplicates while preserving order
        seen = set()
        unique_recommendations = []
        for rec in recommendations:
            if rec not in seen:
                seen.add(rec)
                unique_recommendations.append(rec)

        return unique_recommendations[:10]  # Return top 10 unique recommendations

    # Additional helper methods for comprehensive analysis
    def _analyze_market_movements(self, events: List[CompetitiveEvent]) -> Dict[str, Any]:
        """Analyze market movements and positioning"""
        return {
            "expansion_activities": len([e for e in events if e.event_type == EventType.EXPANSION]),
            "pricing_changes": len([e for e in events if e.event_type == EventType.PRICING_CHANGE]),
            "product_launches": len([e for e in events if e.event_type == EventType.PRODUCT_LAUNCH]),
            "market_implications": "Increased competitive pressure in premium and mid-range segments"
        }

    def _assess_competitive_risks(self, events: List[CompetitiveEvent]) -> List[str]:
        """Assess competitive risks based on events"""
        risks = [
            "Potential market share erosion from aggressive pricing strategies",
            "Technology gap risks from competitors' innovation pace",
            "Brand perception challenges from marketing campaign effectiveness"
        ]
        return risks

    def _identify_strategic_shifts(self, events: List[CompetitiveEvent]) -> Dict[str, Any]:
        """Identify strategic shifts in the market"""
        return {
            "focus_areas": ["5G adoption", "AI integration", "Sustainable practices"],
            "emerging_segments": ["Foldable devices", "AR/VR integration"],
            "consolidation_trends": "Partnership announcements increased by 40%"
        }

    def _analyze_competitive_landscape(self, events: List[CompetitiveEvent]) -> Dict[str, Any]:
        """Analyze overall competitive landscape"""
        return {
            "market_leaders": ["Apple", "Samsung"],
            "rising_challengers": ["Xiaomi", "OnePlus"],
            "innovation_leaders": self._identify_innovation_leaders(events),
            "competitive_intensity": "High - Multiple product launches and pricing adjustments"
        }

    def _identify_innovation_leaders(self, events: List[CompetitiveEvent]) -> List[str]:
        """Identify innovation leaders based on events"""
        innovation_events = [e for e in events if e.event_type == EventType.TECHNOLOGY_UPDATE]
        companies = [e.competitor for e in innovation_events]
        return list(set(companies))[:3]  # Top 3 innovation leaders

# Example usage and demo data generator
def create_sample_events() -> List[CompetitiveEvent]:
    """Create sample competitive events for testing"""
    sample_events = [
        CompetitiveEvent(
            event_id="1",
            timestamp=datetime.datetime.now() - datetime.timedelta(hours=2),
            competitor="Apple",
            event_type=EventType.PRODUCT_LAUNCH,
            title="iPhone 16 Pro Max with Advanced AI Features",
            description="Apple announces iPhone 16 Pro Max with revolutionary AI chip and enhanced camera system targeting professional photography market.",
            impact_score=8.5,
            urgency_level=UrgencyLevel.CRITICAL,
            entities=["iPhone 16", "AI chip", "camera system"],
            strategic_analysis="Significant threat to Android premium segment with AI differentiation",
            recommendations=[
                "Accelerate AI feature development for next flagship",
                "Review pricing strategy for premium segment",
                "Enhance camera marketing messaging"
            ],
            source_url="https://example.com/apple-announcement",
            confidence_score=0.95
        ),
        CompetitiveEvent(
            event_id="2",
            timestamp=datetime.datetime.now() - datetime.timedelta(hours=5),
            competitor="Samsung",
            event_type=EventType.PRICING_CHANGE,
            title="Galaxy S24 Series Price Reduction",
            description="Samsung reduces Galaxy S24 series prices by 15% across all variants to compete with Chinese brands.",
            impact_score=7.2,
            urgency_level=UrgencyLevel.HIGH,
            entities=["Galaxy S24", "price reduction", "15%"],
            strategic_analysis="Aggressive pricing strategy indicates market share pressure",
            recommendations=[
                "Monitor market response to price changes",
                "Consider competitive pricing adjustments",
                "Strengthen value proposition messaging"
            ],
            source_url="https://example.com/samsung-pricing",
            confidence_score=0.88
        ),
        CompetitiveEvent(
            event_id="3",
            timestamp=datetime.datetime.now() - datetime.timedelta(days=1),
            competitor="Xiaomi",
            event_type=EventType.EXPANSION,
            title="Xiaomi Enters European Premium Market",
            description="Xiaomi launches premium Mi 14 Ultra in European markets with aggressive marketing campaign targeting Samsung and Apple users.",
            impact_score=6.8,
            urgency_level=UrgencyLevel.MEDIUM,
            entities=["Mi 14 Ultra", "European market", "premium segment"],
            strategic_analysis="Chinese brand expansion threatens established premium players",
            recommendations=[
                "Strengthen European market presence",
                "Develop counter-marketing strategy",
                "Monitor Xiaomi's pricing and feature strategy"
            ],
            source_url="https://example.com/xiaomi-europe",
            confidence_score=0.82
        )
    ]

    return sample_events

# Demo function for Google Colab
def run_demo():
    """Run a demonstration of the Report Generator Agent"""
    print("ðŸš€ Mobile Market Report Generator Agent Demo")
    print("=" * 50)

    # Initialize the agent
    agent = MobileMarketReportGenerator()

    # Create sample events
    sample_events = create_sample_events()

    # Generate daily brief
    print("\nðŸ“Š Generating Daily Brief...")
    daily_brief = agent.generate_daily_brief(sample_events)
    print(json.dumps(daily_brief, indent=2, default=str))

    # Generate weekly intelligence
    print("\nðŸ“ˆ Generating Weekly Intelligence Report...")
    weekly_report = agent.generate_weekly_intelligence(sample_events)
    print(f"Weekly Report Generated with {len(weekly_report)} sections")

    # Create dashboard
    print("\nðŸ“± Creating Visual Dashboard...")
    dashboard = agent.create_visual_dashboard(sample_events)
    dashboard.show()

    # Export to PDF
    print("\nðŸ“„ Exporting to PDF...")
    pdf_filename = agent.export_to_pdf(daily_brief)

    print(f"\nâœ… Demo completed! Reports generated successfully.")
    print(f"PDF Report: {pdf_filename}")

if __name__ == "__main__":
    # Run the demo
    run_demo()

