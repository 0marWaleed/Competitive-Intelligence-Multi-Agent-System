# -*- coding: utf-8 -*-
"""Trend Analysis Agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1betGpTQxuDoCeNfRFlIWXSeED1VHAqV8

Mobile Trend Analysis Agent
Competitive Intelligence Multi-Agent System - Mobile Phone Market

Purpose: Identify patterns and trends across mobile competitive activities over time
Target: Mobile phone market trend analysis (Apple, Samsung, Oppo, etc.)
Functions:
- Mobile behavior pattern recognition
- Market movement trend analysis
- Technology adoption tracking in mobile
- Mobile pricing trend evaluation
- Investment and expansion pattern identification
Output: Weekly/Monthly trend reports with predictive insights
"""

# Commented out IPython magic to ensure Python compatibility.
!pip -q install numpy pandas matplotlib seaborn scipy

import warnings
warnings.filterwarnings('ignore')

import matplotlib.pyplot as plt
# %matplotlib inline

# ===== Mobile Trend Analysis Agent (Full Class) =====
import json
import datetime
import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass, asdict
from enum import Enum
from collections import defaultdict, Counter
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

class MobileTrendType(Enum):
    """Types of mobile market trends"""
    TECHNOLOGY = "Technology Advancement"
    PRICING = "Pricing Strategy"
    FEATURE = "Feature Innovation"
    MARKET_SHARE = "Market Share Movement"
    LAUNCH_PATTERN = "Product Launch Pattern"
    MARKETING = "Marketing Strategy"
    PARTNERSHIP = "Partnership & Collaboration"
    DESIGN = "Design & Aesthetics"
    PERFORMANCE = "Performance Enhancement"
    CAMERA = "Camera Technology"
    BATTERY = "Battery & Charging"
    DISPLAY = "Display Technology"

class TrendDirection(Enum):
    """Direction of trend movement"""
    INCREASING = "Increasing"
    DECREASING = "Decreasing"
    STABLE = "Stable"
    VOLATILE = "Volatile"
    SEASONAL = "Seasonal"

class TrendSignificance(Enum):
    """Significance level of trends"""
    CRITICAL = "Critical"
    HIGH = "High"
    MEDIUM = "Medium"
    LOW = "Low"

@dataclass
class MobileTrendInsight:
    """Structure for mobile trend insights"""
    trend_id: str
    trend_type: MobileTrendType
    title: str
    description: str
    direction: TrendDirection
    significance: TrendSignificance
    confidence_score: float  # 0.0 to 1.0
    time_period: str
    affected_brands: List[str]
    key_metrics: Dict[str, Any]
    supporting_evidence: List[str]
    implications: List[str]
    predictions: List[str]
    recommendations: List[str]
    created_at: datetime.datetime

class MobileTrendAnalysisAgent:
    """
    Agent that analyzes mobile market trends and patterns
    across competitive activities over time
    """

    def __init__(self):
        """Initialize the Mobile Trend Analysis Agent"""
        self.mobile_events_history: List[Dict[str, Any]] = []
        self.trend_insights: List[MobileTrendInsight] = []
        self.mobile_brands = [
            'Apple', 'Samsung', 'Oppo', 'Xiaomi', 'Vivo', 'OnePlus',
            'Huawei', 'Google', 'Nothing', 'Realme', 'Honor', 'Motorola'
        ]

        # Mobile-specific trend patterns
        self.mobile_trend_patterns = self._initialize_mobile_patterns()

        # Technology evolution tracking
        self.mobile_tech_timeline = self._initialize_tech_timeline()

        # Price segment definitions
        self.price_segments = {
            'budget': (0, 300),
            'mid_range': (300, 800),
            'premium': (800, 1200),
            'ultra_premium': (1200, 2000)
        }

    def analyze_mobile_trends(self,
                              mobile_events: List[Dict[str, Any]],
                              time_window_days: int = 90) -> List[MobileTrendInsight]:
        """
        Main method to analyze mobile market trends
        """
        try:
            # Store events for analysis
            self.mobile_events_history.extend(mobile_events)

            # Filter events by time window
            cutoff_date = datetime.datetime.now() - datetime.timedelta(days=time_window_days)
            recent_events = [
                event for event in self.mobile_events_history
                if self._parse_date(event.get('date', '')) >= cutoff_date
            ]

            if not recent_events:
                return []

            # Convert to DataFrame for analysis
            df = pd.DataFrame(recent_events)

            # Ensure required columns exist
            for col in ['event_type','competitor','description','date','source','impact_score']:
                if col not in df.columns:
                    df[col] = None

            # Run different trend analyses
            trend_insights: List[MobileTrendInsight] = []
            trend_insights.extend(self._analyze_technology_trends(df))
            trend_insights.extend(self._analyze_pricing_trends(df))
            trend_insights.extend(self._analyze_feature_trends(df))
            trend_insights.extend(self._analyze_launch_patterns(df))
            trend_insights.extend(self._analyze_market_movements(df))
            trend_insights.extend(self._analyze_brand_strategies(df))
            trend_insights.extend(self._analyze_camera_trends(df))
            trend_insights.extend(self._analyze_performance_trends(df))

            # Store insights
            self.trend_insights.extend(trend_insights)

            # Sort by significance and confidence
            sig_rank = {'CRITICAL': 4, 'HIGH': 3, 'MEDIUM': 2, 'LOW': 1}
            trend_insights.sort(
                key=lambda x: (sig_rank[x.significance.value], x.confidence_score),
                reverse=True
            )
            return trend_insights

        except Exception as e:
            print(f"Error in mobile trend analysis: {str(e)}")
            return []

    def _analyze_technology_trends(self, df: pd.DataFrame) -> List[MobileTrendInsight]:
        """Analyze technology advancement trends in mobile market"""
        trends: List[MobileTrendInsight] = []
        try:
            # Better 5G detection
            if 'description' in df and df['description'].str.contains(r'\b5G\b', case=False, na=False).any():
                fiveg_events = df[df['description'].str.contains(r'\b5G\b', case=False, na=False)]
                if len(fiveg_events) > 2:
                    trend = MobileTrendInsight(
                        trend_id=f"TECH_5G_{datetime.datetime.now().strftime('%Y%m%d')}",
                        trend_type=MobileTrendType.TECHNOLOGY,
                        title="5G Technology Acceleration in Mobile Phones",
                        description="Increasing focus on 5G capabilities across mobile phone launches",
                        direction=TrendDirection.INCREASING,
                        significance=TrendSignificance.HIGH,
                        confidence_score=0.8,
                        time_period="Last 90 days",
                        affected_brands=list(fiveg_events['competitor'].dropna().unique()),
                        key_metrics={
                            'fiveg_mentions': len(fiveg_events),
                            'brands_adopting': len(fiveg_events['competitor'].dropna().unique()),
                            'growth_rate': 'High'
                        },
                        supporting_evidence=[
                            f"{len(fiveg_events)} 5G-related mobile announcements",
                            f"Adoption by {len(fiveg_events['competitor'].dropna().unique())} major brands",
                            "Increased marketing focus on 5G capabilities"
                        ],
                        implications=[
                            "5G is becoming standard feature expectation",
                            "Network infrastructure development driving adoption",
                            "Competitive pressure to include 5G in all segments"
                        ],
                        predictions=[
                            "5G will be in 80%+ of mid-range phones by 2025",
                            "5G-only phones may emerge in premium segment",
                            "Focus will shift to 5G optimization and applications"
                        ],
                        recommendations=[
                            "Ensure all new phone models include 5G",
                            "Focus on 5G performance optimization",
                            "Develop 5G-specific use cases and features"
                        ],
                        created_at=datetime.datetime.now()
                    )
                    trends.append(trend)

            # AI/Machine Learning integration
            ai_keywords = ['AI', 'artificial intelligence', 'machine learning', 'ML', 'neural', 'smart']
            ai_pattern = '|'.join(ai_keywords)
            ai_events = df[df['description'].str.contains(ai_pattern, case=False, na=False)]
            if len(ai_events) > 1:
                trend = MobileTrendInsight(
                    trend_id=f"TECH_AI_{datetime.datetime.now().strftime('%Y%m%d')}",
                    trend_type=MobileTrendType.TECHNOLOGY,
                    title="AI Integration in Mobile Devices",
                    description="Growing integration of AI capabilities in mobile phones",
                    direction=TrendDirection.INCREASING,
                    significance=TrendSignificance.HIGH,
                    confidence_score=0.85,
                    time_period="Last 90 days",
                    affected_brands=list(ai_events['competitor'].dropna().unique()),
                    key_metrics={
                        'ai_mentions': len(ai_events),
                        'brands_implementing': len(ai_events['competitor'].dropna().unique())
                    },
                    supporting_evidence=[
                        f"{len(ai_events)} AI-related mobile announcements",
                        "AI processors becoming standard in flagship phones",
                        "AI photography and video features proliferating"
                    ],
                    implications=[
                        "AI becoming key differentiator",
                        "On-device AI processing increasing",
                        "User experience enhancement through AI"
                    ],
                    predictions=[
                        "AI features will expand beyond camera to all phone functions",
                        "On-device AI processing will improve significantly",
                        "AI assistants will become more contextual and proactive"
                    ],
                    recommendations=[
                        "Invest in AI chipset partnerships",
                        "Develop AI-powered user experience features",
                        "Market AI capabilities effectively to consumers"
                    ],
                    created_at=datetime.datetime.now()
                )
                trends.append(trend)
        except Exception as e:
            print(f"Error in technology trend analysis: {str(e)}")
        return trends

    def _analyze_performance_trends(self, df: pd.DataFrame) -> List[MobileTrendInsight]:
        """Analyze mobile performance enhancement trends"""
        trends: List[MobileTrendInsight] = []
        try:
            performance_keywords = ['processor', 'chipset', 'performance', 'speed', 'RAM', 'storage', 'benchmark']
            performance_pattern = '|'.join(performance_keywords)
            performance_events = df[df['description'].str.contains(performance_pattern, case=False, na=False)]
            if len(performance_events) > 2:
                trend = MobileTrendInsight(
                    trend_id=f"PERFORMANCE_{datetime.datetime.now().strftime('%Y%m%d')}",
                    trend_type=MobileTrendType.PERFORMANCE,
                    title="Mobile Performance Enhancement Focus",
                    description="Increasing emphasis on mobile phone performance improvements",
                    direction=TrendDirection.INCREASING,
                    significance=TrendSignificance.HIGH,
                    confidence_score=0.8,
                    time_period="Last 90 days",
                    affected_brands=list(performance_events['competitor'].dropna().unique()),
                    key_metrics={
                        'performance_announcements': len(performance_events),
                        'brands_focusing_performance': len(performance_events['competitor'].dropna().unique())
                    },
                    supporting_evidence=[
                        f"{len(performance_events)} performance-related announcements",
                        "Advanced chipsets becoming standard",
                        "RAM and storage capacities increasing"
                    ],
                    implications=[
                        "Performance critical for user experience",
                        "Gaming and productivity driving performance needs",
                        "AI processing requiring more powerful hardware"
                    ],
                    predictions=[
                        "16GB RAM will become common in flagship phones",
                        "1TB storage will be standard in premium segment",
                        "Performance per watt will be key optimization focus"
                    ],
                    recommendations=[
                        "Invest in latest chipset partnerships",
                        "Optimize software for performance",
                        "Highlight performance advantages in marketing"
                    ],
                    created_at=datetime.datetime.now()
                )
                trends.append(trend)
        except Exception as e:
            print(f"Error in performance trend analysis: {str(e)}")
        return trends

    def generate_mobile_trend_report(self, trends: List[MobileTrendInsight]) -> str:
        """Generate comprehensive mobile trend analysis report"""
        if not trends:
            return "No mobile trends identified in the analysis period."

        trends_by_type = defaultdict(list)
        for trend in trends:
            trends_by_type[trend.trend_type].append(trend)

        significance_counts = Counter(trend.significance.value for trend in trends)

        report = f"""
# 📱 MOBILE PHONE MARKET TREND ANALYSIS REPORT
Generated: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## 📊 EXECUTIVE SUMMARY
- **Total Trends Identified**: {len(trends)}
- **Critical Trends**: {significance_counts.get('Critical', 0)}
- **High Impact Trends**: {significance_counts.get('High', 0)}
- **Medium Impact Trends**: {significance_counts.get('Medium', 0)}
- **Low Impact Trends**: {significance_counts.get('Low', 0)}

## 🎯 KEY MOBILE MARKET INSIGHTS

### Critical Trends Requiring Immediate Attention:
"""
        critical_trends = [t for t in trends if t.significance == TrendSignificance.CRITICAL]
        if critical_trends:
            for i, trend in enumerate(critical_trends, 1):
                report += f"""
**{i}. {trend.title}**
- **Impact**: {trend.significance.value} | **Confidence**: {trend.confidence_score:.2f}
- **Direction**: {trend.direction.value}
- **Affected Brands**: {', '.join(trend.affected_brands)}
- **Description**: {trend.description}
- **Key Implication**: {trend.implications[0] if trend.implications else 'No implications listed'}
"""
        else:
            report += "\nNo critical trends identified in current period.\n"

        report += """
## 🔍 TREND ANALYSIS BY CATEGORY

"""
        for trend_type, type_trends in trends_by_type.items():
            report += f"""
### {trend_type.value}
"""
            for trend in type_trends:
                report += f"""
**📈 {trend.title}**
- **Significance**: {trend.significance.value} ({trend.confidence_score:.1%} confidence)
- **Direction**: {trend.direction.value}
- **Brands Involved**: {', '.join(trend.affected_brands)}
- **Timeline**: {trend.time_period}

*Key Insights*:
"""
                for evidence in trend.supporting_evidence[:2]:
                    report += f"• {evidence}\n"
                report += f"""
*Predictions*:
"""
                for prediction in trend.predictions[:2]:
                    report += f"• {prediction}\n"
                report += f"""
*Recommended Actions*:
"""
                for rec in trend.recommendations[:2]:
                    report += f"• {rec}\n"
                report += "\n---\n"

        immediate_actions = []
        for trend in trends:
            if trend.significance in [TrendSignificance.CRITICAL, TrendSignificance.HIGH]:
                immediate_actions.extend(trend.recommendations[:1])

        medium_actions = []
        for trend in trends:
            if trend.significance == TrendSignificance.MEDIUM:
                medium_actions.extend(trend.recommendations[:1])

        report += """
## 🚀 STRATEGIC RECOMMENDATIONS

### Immediate Actions (Next 30 Days):
"""
        for i, action in enumerate(immediate_actions[:5], 1):
            report += f"{i}. {action}\n"

        report += """
### Medium-term Strategy (Next 90 Days):
"""
        for i, action in enumerate(medium_actions[:5], 1):
            report += f"{i}. {action}\n"

        report += f"""
## 🔮 MOBILE MARKET OUTLOOK

### Technology Evolution:
- **AI Integration**: Accelerating across all price segments
- **5G Adoption**: Moving from flagship to mid-range phones
- **Camera Technology**: Megapixel race continues with focus on computational photography
- **Charging Technology**: Fast charging speeds increasing rapidly
- **Display Technology**: High refresh rates becoming standard

### Competitive Dynamics:
- **Brand Activity**: Leading brands driving most innovation
- **Pricing Pressure**: Competitive pricing across segments
- **Feature Differentiation**: Becoming more important for success
- **Partnership Strategy**: Strategic alliances increasing

### Consumer Trends:
- **Performance Expectations**: Higher performance requirements
- **Camera Quality**: Primary purchase decision factor
- **Battery Life**: Fast charging reducing anxiety
- **Value Perception**: Price-to-feature ratio critical

## 📈 TREND CONFIDENCE METRICS

Average Confidence Score: {np.mean([t.confidence_score for t in trends]):.2%}
Highest Confidence Trend: {max(trends, key=lambda x: x.confidence_score).title}
Most Significant Trend: {max(trends, key=lambda x: {'CRITICAL': 4, 'HIGH': 3, 'MEDIUM': 2, 'LOW': 1}[x.significance.value]).title}

---
*Report generated by Mobile Trend Analysis Agent*
*Next analysis recommended in 7-14 days*
"""
        return report

    def get_predictive_insights(self, trends: List[MobileTrendInsight]) -> Dict[str, Any]:
        """Generate predictive insights based on trend analysis"""
        predictions = {'next_30_days': [], 'next_90_days': [], 'next_180_days': [], 'risk_factors': [], 'opportunities': []}
        for trend in trends:
            if trend.significance == TrendSignificance.CRITICAL:
                predictions['next_30_days'].extend(trend.predictions[:1])
                predictions['risk_factors'].extend(trend.implications[:1])
            elif trend.significance == TrendSignificance.HIGH:
                predictions['next_90_days'].extend(trend.predictions[:1])
                predictions['opportunities'].extend(trend.implications[:1])
            else:
                predictions['next_180_days'].extend(trend.predictions[:1])
        return predictions

    def visualize_trends(self, trends: List[MobileTrendInsight]) -> None:
        """Create visualizations for mobile trends"""
        if not trends:
            print("No trends to visualize")
            return

        sns.set_theme()
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('📱 Mobile Market Trend Analysis Dashboard', fontsize=16, fontweight='bold')

        # 1) Trend Significance Distribution
        significance_counts = Counter(trend.significance.value for trend in trends)
        if len(significance_counts) > 0:
            axes[0,0].pie(significance_counts.values(), labels=list(significance_counts.keys()), autopct='%1.1f%%')
            axes[0,0].set_title('Trend Significance Distribution')
        else:
            axes[0,0].text(0.5,0.5,'No data', ha='center'); axes[0,0].axis('off')

        # 2) Trend Types
        type_counts = Counter(trend.trend_type.value for trend in trends)
        axes[0,1].bar(range(len(type_counts)), list(type_counts.values()))
        axes[0,1].set_xticks(range(len(type_counts)))
        axes[0,1].set_xticklabels([t.replace(' ', '\n') for t in type_counts.keys()], rotation=45)
        axes[0,1].set_title('Trend Categories')

        # 3) Confidence Score Distribution
        confidence_scores = [trend.confidence_score for trend in trends]
        axes[1,0].hist(confidence_scores, bins=10, alpha=0.7)
        axes[1,0].set_xlabel('Confidence Score'); axes[1,0].set_ylabel('Frequency')
        axes[1,0].set_title('Trend Confidence Distribution')

        # 4) Brand Involvement
        all_brands = []
        for trend in trends:
            all_brands.extend([b for b in trend.affected_brands if b])
        brand_counts = Counter(all_brands)
        top_brands = dict(brand_counts.most_common(10))
        axes[1,1].bar(range(len(top_brands)), list(top_brands.values()))
        axes[1,1].set_xticks(range(len(top_brands)))
        axes[1,1].set_xticklabels(list(top_brands.keys()), rotation=45)
        axes[1,1].set_title('Brand Involvement in Trends')

        plt.tight_layout()
        plt.show()

    def _initialize_mobile_patterns(self) -> Dict[str, Any]:
        """Initialize mobile-specific trend patterns"""
        return {
            'technology_cycles': {'camera': 12, 'processor': 12, 'battery': 18, 'display': 24},
            'launch_seasons': {'spring': ['March', 'April', 'May'], 'fall': ['September', 'October', 'November']},
            'price_cycles': {'flagship_discount': 6, 'mid_range_refresh': 9}
        }

    def _initialize_tech_timeline(self) -> Dict[str, List[str]]:
        """Initialize mobile technology timeline"""
        return {
            '2024': ['5G mainstream', 'AI processors', '100W charging', '200MP cameras'],
            '2025': ['6G testing', 'Advanced AI', '150W charging', 'Under-display cameras'],
            '2026': ['Foldable mainstream', 'Holographic displays', '200W charging']
        }

    def _parse_date(self, date_str: Any) -> datetime.datetime:
        """Parse various date formats"""
        try:
            if isinstance(date_str, datetime.datetime):
                return date_str
            elif isinstance(date_str, str):
                for fmt in ['%Y-%m-%d', '%d/%m/%Y', '%m/%d/%Y', '%Y-%m-%d %H:%M:%S']:
                    try:
                        return datetime.datetime.strptime(date_str, fmt)
                    except ValueError:
                        continue
                return datetime.datetime.now()
            else:
                return datetime.datetime.now()
        except:
            return datetime.datetime.now()

    def export_trends_data(self, trends: List[MobileTrendInsight], filename: str = None) -> str:
        """Export trend analysis data to JSON"""
        if not filename:
            filename = f"mobile_trends_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

        trends_data = {
            'export_timestamp': datetime.datetime.now().isoformat(),
            'total_trends': len(trends),
            'trends': [asdict(trend) for trend in trends]
        }
        for trend_data in trends_data['trends']:
            if 'created_at' in trend_data and isinstance(trend_data['created_at'], datetime.datetime):
                trend_data['created_at'] = trend_data['created_at'].isoformat()

        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(trends_data, f, indent=2, ensure_ascii=False)
            return f"Trends data exported to {filename}"
        except Exception as e:
            return f"Error exporting data: {str(e)}"

    # ===== Pricing, Camera, Feature, Launch, Market, Brand Analyses =====
    def _analyze_pricing_trends(self, df: pd.DataFrame) -> List[MobileTrendInsight]:
        trends: List[MobileTrendInsight] = []
        try:
            pricing_events = df[df['event_type'] == 'pricing_change']
            if len(pricing_events) > 2:
                price_increases = pricing_events[
                    pricing_events['description'].str.contains('increase|raise|higher', case=False, na=False)
                ]
                price_decreases = pricing_events[
                    pricing_events['description'].str.contains('decrease|reduce|lower|discount', case=False, na=False)
                ]
                if len(price_decreases) > len(price_increases):
                    trend = MobileTrendInsight(
                        trend_id=f"PRICE_DOWN_{datetime.datetime.now().strftime('%Y%m%d')}",
                        trend_type=MobileTrendType.PRICING,
                        title="Mobile Phone Price Reduction Trend",
                        description="Increasing trend of mobile phone price reductions across brands",
                        direction=TrendDirection.DECREASING,
                        significance=TrendSignificance.HIGH,
                        confidence_score=0.75,
                        time_period="Last 90 days",
                        affected_brands=list(pricing_events['competitor'].dropna().unique()),
                        key_metrics={
                            'price_reduction_events': len(price_decreases),
                            'brands_reducing_prices': len(price_decreases['competitor'].dropna().unique()),
                            'net_pricing_direction': 'Downward'
                        },
                        supporting_evidence=[
                            f"{len(price_decreases)} price reduction events",
                            f"{len(price_decreases['competitor'].dropna().unique())} brands reducing prices",
                            "Competitive pressure driving price competition"
                        ],
                        implications=[
                            "Increased price competition in mobile market",
                            "Margin pressure on manufacturers",
                            "Consumer benefit from lower prices"
                        ],
                        predictions=[
                            "Price competition will intensify further",
                            "Focus will shift to value-for-money positioning",
                            "Premium brands may introduce more mid-range options"
                        ],
                        recommendations=[
                            "Review pricing strategy across all models",
                            "Focus on value proposition communication",
                            "Consider strategic price adjustments"
                        ],
                        created_at=datetime.datetime.now()
                    )
                    trends.append(trend)

            premium_events = df[df['description'].str.contains('premium|flagship|ultra|pro max', case=False, na=False)]
            if len(premium_events) > 3:
                trend = MobileTrendInsight(
                    trend_id=f"PREMIUM_FOCUS_{datetime.datetime.now().strftime('%Y%m%d')}",
                    trend_type=MobileTrendType.PRICING,
                    title="Premium Mobile Phone Segment Expansion",
                    description="Increased focus on premium smartphone segment across brands",
                    direction=TrendDirection.INCREASING,
                    significance=TrendSignificance.MEDIUM,
                    confidence_score=0.7,
                    time_period="Last 90 days",
                    affected_brands=list(premium_events['competitor'].dropna().unique()),
                    key_metrics={
                        'premium_launches': len(premium_events),
                        'brands_in_premium': len(premium_events['competitor'].dropna().unique())
                    },
                    supporting_evidence=[
                        f"{len(premium_events)} premium phone announcements",
                        "Multiple brands launching ultra-premium models",
                        "Increased feature differentiation in premium segment"
                    ],
                    implications=[
                        "Premium segment becoming more competitive",
                        "Higher profit margins attracting more players",
                        "Consumer willingness to pay premium for flagship features"
                    ],
                    predictions=[
                        "Premium segment competition will intensify",
                        "More brands will enter ultra-premium category",
                        "Feature differentiation will become more important"
                    ],
                    recommendations=[
                        "Strengthen premium product positioning",
                        "Invest in flagship-level features",
                        "Develop premium brand communication strategy"
                    ],
                    created_at=datetime.datetime.now()
                )
                trends.append(trend)
        except Exception as e:
            print(f"Error in pricing trend analysis: {str(e)}")
        return trends

    def _analyze_camera_trends(self, df: pd.DataFrame) -> List[MobileTrendInsight]:
        trends: List[MobileTrendInsight] = []
        try:
            camera_keywords = ['camera', 'MP', 'megapixel', 'photo', 'photography', 'video', 'lens', 'zoom']
            camera_pattern = '|'.join(camera_keywords)
            camera_events = df[df['description'].str.contains(camera_pattern, case=False, na=False)]
            if len(camera_events) > 3:
                mp_mentions = camera_events[camera_events['description'].str.contains(r'\d+MP|\d+\s*megapixel', case=False, na=False)]
                if len(mp_mentions) > 2:
                    trend = MobileTrendInsight(
                        trend_id=f"CAMERA_MP_{datetime.datetime.now().strftime('%Y%m%d')}",
                        trend_type=MobileTrendType.CAMERA,
                        title="Mobile Camera Megapixel Arms Race",
                        description="Continuous increase in mobile camera megapixel counts across brands",
                        direction=TrendDirection.INCREASING,
                        significance=TrendSignificance.HIGH,
                        confidence_score=0.8,
                        time_period="Last 90 days",
                        affected_brands=list(mp_mentions['competitor'].dropna().unique()),
                        key_metrics={
                            'camera_announcements': len(mp_mentions),
                            'brands_upgrading_cameras': len(mp_mentions['competitor'].dropna().unique())
                        },
                        supporting_evidence=[
                            f"{len(mp_mentions)} camera megapixel announcements",
                            "Multiple brands launching 100MP+ cameras",
                            "Camera quality becoming primary differentiator"
                        ],
                        implications=[
                            "Camera quality is critical competitive factor",
                            "Consumer expectation for better photos increasing",
                            "Image processing becoming as important as sensors"
                        ],
                        predictions=[
                            "200MP cameras will become more common",
                            "Computational photography will advance significantly",
                            "Multi-camera systems will become standard"
                        ],
                        recommendations=[
                            "Invest in advanced camera sensor partnerships",
                            "Develop superior image processing algorithms",
                            "Focus on real-world camera performance, not just specs"
                        ],
                        created_at=datetime.datetime.now()
                    )
                    trends.append(trend)

            video_events = camera_events[camera_events['description'].str.contains('video|4K|8K|recording', case=False, na=False)]
            if len(video_events) > 2:
                trend = MobileTrendInsight(
                    trend_id=f"VIDEO_FOCUS_{datetime.datetime.now().strftime('%Y%m%d')}",
                    trend_type=MobileTrendType.CAMERA,
                    title="Mobile Video Capabilities Enhancement",
                    description="Increasing focus on mobile video recording capabilities",
                    direction=TrendDirection.INCREASING,
                    significance=TrendSignificance.MEDIUM,
                    confidence_score=0.75,
                    time_period="Last 90 days",
                    affected_brands=list(video_events['competitor'].dropna().unique()),
                    key_metrics={
                        'video_feature_announcements': len(video_events),
                        'brands_enhancing_video': len(video_events['competitor'].dropna().unique())
                    },
                    supporting_evidence=[
                        f"{len(video_events)} video capability announcements",
                        "4K/8K video becoming standard in premium phones",
                        "Advanced video stabilization features"
                    ],
                    implications=[
                        "Mobile content creation driving video feature demand",
                        "Social media influence on mobile video capabilities",
                        "Professional video features in consumer phones"
                    ],
                    predictions=[
                        "8K video will become standard in flagship phones",
                        "AI-powered video editing will be built-in",
                        "Professional video features will trickle down to mid-range"
                    ],
                    recommendations=[
                        "Enhance video recording capabilities",
                        "Develop AI-powered video features",
                        "Partner with content creators for marketing"
                    ],
                    created_at=datetime.datetime.now()
                )
                trends.append(trend)
        except Exception as e:
            print(f"Error in camera trend analysis: {str(e)}")
        return trends

    def _analyze_feature_trends(self, df: pd.DataFrame) -> List[MobileTrendInsight]:
        trends: List[MobileTrendInsight] = []
        try:
            charging_keywords = ['fast charging', 'wireless charging', 'mAh', 'battery', 'power', 'charge']
            charging_pattern = '|'.join(charging_keywords)
            charging_events = df[df['description'].str.contains(charging_pattern, case=False, na=False)]
            if len(charging_events) > 2:
                trend = MobileTrendInsight(
                    trend_id=f"CHARGING_TECH_{datetime.datetime.now().strftime('%Y%m%d')}",
                    trend_type=MobileTrendType.FEATURE,
                    title="Mobile Fast Charging Technology Race",
                    description="Rapid advancement in mobile phone charging technologies",
                    direction=TrendDirection.INCREASING,
                    significance=TrendSignificance.HIGH,
                    confidence_score=0.85,
                    time_period="Last 90 days",
                    affected_brands=list(charging_events['competitor'].dropna().unique()),
                    key_metrics={
                        'charging_announcements': len(charging_events),
                        'brands_upgrading_charging': len(charging_events['competitor'].dropna().unique())
                    },
                    supporting_evidence=[
                        f"{len(charging_events)} charging technology announcements",
                        "Fast charging speeds increasing rapidly",
                        "Wireless charging becoming standard"
                    ],
                    implications=[
                        "Battery life anxiety driving charging innovation",
                        "User convenience becoming priority",
                        "Charging speed as competitive differentiator"
                    ],
                    predictions=[
                        "100W+ charging will become mainstream",
                        "Wireless charging speeds will approach wired speeds",
                        "Reverse wireless charging will be more common"
                    ],
                    recommendations=[
                        "Invest in fast charging technology partnerships",
                        "Develop unique charging features",
                        "Focus on charging safety and battery longevity"
                    ],
                    created_at=datetime.datetime.now()
                )
                trends.append(trend)

            display_keywords = ['display', 'screen', 'OLED', 'AMOLED', 'refresh rate', '120Hz', '90Hz', 'foldable']
            display_pattern = '|'.join(display_keywords)
            display_events = df[df['description'].str.contains(display_pattern, case=False, na=False)]
            if len(display_events) > 2:
                trend = MobileTrendInsight(
                    trend_id=f"DISPLAY_TECH_{datetime.datetime.now().strftime('%Y%m%d')}",
                    trend_type=MobileTrendType.DISPLAY,
                    title="Mobile Display Technology Evolution",
                    description="Advancement in mobile display technologies and refresh rates",
                    direction=TrendDirection.INCREASING,
                    significance=TrendSignificance.MEDIUM,
                    confidence_score=0.8,
                    time_period="Last 90 days",
                    affected_brands=list(display_events['competitor'].dropna().unique()),
                    key_metrics={
                        'display_announcements': len(display_events),
                        'brands_upgrading_displays': len(display_events['competitor'].dropna().unique())
                    },
                    supporting_evidence=[
                        f"{len(display_events)} display technology announcements",
                        "High refresh rates becoming standard",
                        "OLED technology proliferating across segments"
                    ],
                    implications=[
                        "Display quality crucial for user experience",
                        "Gaming and content consumption driving display improvements",
                        "Display technology costs decreasing"
                    ],
                    predictions=[
                        "120Hz displays will be in most mid-range phones",
                        "Foldable displays will become more affordable",
                        "Under-display cameras will become mainstream"
                    ],
                    recommendations=[
                        "Invest in high-quality display partnerships",
                        "Optimize software for high refresh rate displays",
                        "Consider foldable display technology roadmap"
                    ],
                    created_at=datetime.datetime.now()
                )
                trends.append(trend)
        except Exception as e:
            print(f"Error in feature trend analysis: {str(e)}")
        return trends

    def _analyze_launch_patterns(self, df: pd.DataFrame) -> List[MobileTrendInsight]:
        trends: List[MobileTrendInsight] = []
        try:
            launch_events = df[df['event_type'] == 'product_launch']
            if len(launch_events) > 3:
                launch_events = launch_events.copy()
                launch_events['datetime'] = pd.to_datetime(launch_events['date'], errors='coerce')
                launch_events = launch_events.dropna(subset=['datetime'])
                if len(launch_events) > 3:
                    launch_events['month'] = launch_events['datetime'].dt.month
                    monthly_launches = launch_events['month'].value_counts()
                    peak_months = monthly_launches.head(2).index.tolist()
                    trend = MobileTrendInsight(
                        trend_id=f"LAUNCH_PATTERN_{datetime.datetime.now().strftime('%Y%m%d')}",
                        trend_type=MobileTrendType.LAUNCH_PATTERN,
                        title="Mobile Phone Launch Seasonality Pattern",
                        description=f"Mobile phone launches concentrated in months {peak_months}",
                        direction=TrendDirection.SEASONAL,
                        significance=TrendSignificance.MEDIUM,
                        confidence_score=0.7,
                        time_period="Last 90 days",
                        affected_brands=list(launch_events['competitor'].dropna().unique()),
                        key_metrics={
                            'total_launches': len(launch_events),
                            'peak_months': peak_months,
                            'brands_launching': len(launch_events['competitor'].dropna().unique())
                        },
                        supporting_evidence=[
                            f"{len(launch_events)} product launches tracked",
                            f"Peak launch activity in months {peak_months}",
                            "Seasonal launch patterns emerging"
                        ],
                        implications=[
                            "Strategic timing important for launch success",
                            "Market attention divided during peak months",
                            "Opportunity for counter-seasonal launches"
                        ],
                        predictions=[
                            "Launch timing will become more strategic",
                            "Off-season launches may gain more attention",
                            "Global launch coordination will improve"
                        ],
                        recommendations=[
                            "Time launches to avoid peak competition periods",
                            "Consider counter-seasonal launch strategy",
                            "Plan marketing budget allocation around launch seasons"
                        ],
                        created_at=datetime.datetime.now()
                    )
                    trends.append(trend)
        except Exception as e:
            print(f"Error in launch pattern analysis: {str(e)}")
        return trends

    def _analyze_market_movements(self, df: pd.DataFrame) -> List[MobileTrendInsight]:
        trends: List[MobileTrendInsight] = []
        try:
            brand_activity = df['competitor'].value_counts()
            if len(brand_activity) > 3:
                most_active_brands = brand_activity.head(3).index.tolist()
                trend = MobileTrendInsight(
                    trend_id=f"BRAND_ACTIVITY_{datetime.datetime.now().strftime('%Y%m%d')}",
                    trend_type=MobileTrendType.MARKET_SHARE,
                    title="Mobile Brand Competitive Activity Levels",
                    description=f"Highest competitive activity from {', '.join(most_active_brands)}",
                    direction=TrendDirection.VOLATILE,
                    significance=TrendSignificance.MEDIUM,
                    confidence_score=0.75,
                    time_period="Last 90 days",
                    affected_brands=most_active_brands,
                    key_metrics={
                        'total_events': len(df),
                        'most_active_brands': most_active_brands,
                        'activity_concentration': f"{brand_activity.head(3).sum()}/{len(df)} events from top 3 brands"
                    },
                    supporting_evidence=[
                        f"{brand_activity.iloc[0]} events from {most_active_brands[0]}",
                        f"Top 3 brands account for {(brand_activity.head(3).sum()/len(df)*100):.1f}% of activity",
                        "Concentrated competitive activity from leading brands"
                    ],
                    implications=[
                        "Leading brands driving market evolution",
                        "Competitive pressure concentrated among top players",
                        "Smaller brands may struggle for attention"
                    ],
                    predictions=[
                        "Market consolidation may continue",
                        "Top brands will intensify competition",
                        "Innovation will be driven by leading players"
                    ],
                    recommendations=[
                        "Focus competitive response on most active brands",
                        "Identify niche opportunities not addressed by leaders",
                        "Consider strategic partnerships to compete with leaders"
                    ],
                    created_at=datetime.datetime.now()
                )
                trends.append(trend)
        except Exception as e:
            print(f"Error in market movement analysis: {str(e)}")
        return trends

    def _analyze_brand_strategies(self, df: pd.DataFrame) -> List[MobileTrendInsight]:
        trends: List[MobileTrendInsight] = []
        try:
            partnership_events = df[df['description'].str.contains('partnership|collaboration|alliance|deal', case=False, na=False)]
            if len(partnership_events) > 2:
                trend = MobileTrendInsight(
                    trend_id=f"PARTNERSHIP_{datetime.datetime.now().strftime('%Y%m%d')}",
                    trend_type=MobileTrendType.PARTNERSHIP,
                    title="Mobile Industry Partnership Trend",
                    description="Increasing strategic partnerships in mobile industry",
                    direction=TrendDirection.INCREASING,
                    significance=TrendSignificance.MEDIUM,
                    confidence_score=0.7,
                    time_period="Last 90 days",
                    affected_brands=list(partnership_events['competitor'].dropna().unique()),
                    key_metrics={
                        'partnership_announcements': len(partnership_events),
                        'brands_partnering': len(partnership_events['competitor'].dropna().unique())
                    },
                    supporting_evidence=[
                        f"{len(partnership_events)} partnership announcements",
                        "Strategic alliances becoming more common",
                        "Collaboration across technology and content"
                    ],
                    implications=[
                        "Ecosystem building becoming crucial",
                        "Vertical integration through partnerships",
                        "Shared technology development"
                    ],
                    predictions=[
                        "More cross-industry partnerships will emerge",
                        "Technology sharing agreements will increase",
                        "Ecosystem partnerships will be key differentiator"
                    ],
                    recommendations=[
                        "Develop strategic partnership strategy",
                        "Identify potential technology partners",
                        "Build ecosystem collaboration capabilities"
                    ],
                    created_at=datetime.datetime.now()
                )
                trends.append(trend)
        except Exception as e:
            print(f"Error in brand strategy analysis: {str(e)}")
        return trends

agent = MobileTrendAnalysisAgent()

sample_mobile_events = [
    {
        'event_type': 'product_launch',
        'competitor': 'Samsung',
        'description': 'Samsung Galaxy S25 Ultra with 200MP camera, AI photography, and 5G enhancements',
        'date': '2025-08-15',
        'source': 'Samsung Official',
        'impact_score': 8.5
    },
    {
        'event_type': 'product_launch',
        'competitor': 'Apple',
        'description': 'iPhone 16 Pro: advanced on-device AI processing, optimized 5G modem',
        'date': '2025-07-10',
        'source': 'Apple Event',
        'impact_score': 9.0
    },
    {
        'event_type': 'pricing_change',
        'competitor': 'Oppo',
        'description': 'Oppo reduces Find X8 Pro price by 15% with fast charging upgrade promo',
        'date': '2025-08-01',
        'source': 'Oppo News',
        'impact_score': 6.5
    },
    {
        'event_type': 'feature_update',
        'competitor': 'Xiaomi',
        'description': 'Xiaomi 15 Pro adds 120W fast charging and wireless charging improvements',
        'date': '2025-07-28',
        'source': 'Xiaomi Launch',
        'impact_score': 7.2
    },
    {
        'event_type': 'marketing_campaign',
        'competitor': 'OnePlus',
        'description': 'OnePlus partners with professional photographers for AI photo campaign',
        'date': '2025-08-20',
        'source': 'OnePlus Marketing',
        'impact_score': 6.0
    },
    {
        'event_type': 'product_launch',
        'competitor': 'Google',
        'description': 'Google Pixel 10 with enhanced AI features and computational photography',
        'date': '2025-08-10',
        'source': 'Google I/O',
        'impact_score': 7.8
    },
    {
        'event_type': 'partnership',
        'competitor': 'Vivo',
        'description': 'Vivo announces partnership with Zeiss for next-gen camera tech',
        'date': '2025-08-05',
        'source': 'Vivo Press',
        'impact_score': 6.8
    },
    {
        'event_type': 'product_launch',
        'competitor': 'Nothing',
        'description': 'Nothing Phone 4 introduces unique design and AI-powered interface',
        'date': '2025-07-30',
        'source': 'Nothing Official',
        'impact_score': 5.5
    }
]

print("🔍 Analyzing mobile market trends...")
trend_insights = agent.analyze_mobile_trends(sample_mobile_events, time_window_days=120)
print(f"✅ Identified {len(trend_insights)} trends\n")

for i, t in enumerate(trend_insights[:5], 1):
    print(f"{i}. {t.title} — {t.trend_type.value} — {t.significance.value} ({t.confidence_score:.0%})")

# ===== Report, Visuals, Export =====
report = agent.generate_mobile_trend_report(trend_insights)
print(report[:2000] + "..." if len(report) > 2000 else report)

# Visualizations
agent.visualize_trends(trend_insights)

# Export JSON + Download (Colab)
msg = agent.export_trends_data(trend_insights, filename="mobile_trends_report.json")
print("\n" + msg)

try:
    from google.colab import files
    files.download("mobile_trends_report.json")
except Exception as e:
    print("If running locally (not Colab), skip download:", e)

